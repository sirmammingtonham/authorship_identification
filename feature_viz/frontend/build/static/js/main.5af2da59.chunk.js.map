{"version":3,"sources":["BtnSelect.tsx","index.tsx"],"names":["MyComponent","state","selected","JSON","parse","props","args","onClicked","idx","includes","s","filter","val","setState","prevState","current","Streamlit","setComponentValue","document","body","style","background","words","this","theme","base","className","map","option","onClick","key","StreamlitComponentBase","withStreamlitConnection","ReactDOM","render","StrictMode","BtnSelect","getElementById"],"mappings":"6QAaMA,G,MAAW,iKA+Cd,OA/Cc,oCACRC,MAAQ,CACbC,SAAUC,KAAKC,MAAM,EAAKC,MAAMC,KAAe,WAChD,EA8BOC,UAAY,SAACC,GACnB,GAAI,EAAKP,MAAMC,SAASO,SAASD,GAAM,CACrC,IAAIE,EAAI,EAAKT,MAAMC,SAASS,QAAO,SAACC,GAAQ,OAAKA,IAAQJ,KACzD,EAAKK,UACH,SAACC,GAAS,MAAM,CAAEC,QAASP,EAAKN,SAAUQ,MAC1C,kBAAMM,IAAUC,kBAAkBP,UAE/B,CACL,IAAIA,EAAC,sBAAO,EAAKT,MAAMC,UAAQ,CAAEM,IACjC,EAAKK,UACH,SAACC,GAAS,MAAM,CAAEC,QAASP,EAAKN,SAAUQ,MAC1C,kBAAMM,IAAUC,kBAAkBP,QAGvC,EAhBA,OAgBA,8CA1CD,WACE,0EACAQ,SAASC,KAAKC,MAAMC,WAAa,gBAClC,oBAED,WAAqB,IAAD,aAEZC,EAAkBC,KAAKlB,MAAMC,KAAY,MAGzCJ,EAAWqB,KAAKtB,MAAMC,SACtBsB,EAAuC,QAA1B,EAAa,QAAb,EAAGD,KAAKlB,aAAK,OAAO,QAAP,EAAV,EAAYmB,aAAK,WAAP,EAAV,EAAmBC,YAAI,QAAI,QAEjD,OACE,yBAAKC,UAAU,WACZJ,EAAMK,KAAI,SAACC,EAAQpB,GAAG,OACrB,4BACEqB,QAAS,kBAAM,EAAKtB,UAAUC,IAC9BkB,UAAS,UAAKF,EAAK,YAAItB,EAASO,SAASD,GAAO,WAAa,IAC7DsB,IAAKtB,GAEJoB,WAKV,EA/Bc,CAASG,MAuDXC,cAAwBhC,GChEvCiC,IAASC,OACP,kBAAC,IAAMC,WAAU,KACf,kBAACC,EAAS,OAEZlB,SAASmB,eAAe,W","file":"static/js/main.5af2da59.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport \"./custom.css\"\n\ninterface State {\n  selected: number[]\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = {\n    selected: JSON.parse(this.props.args[\"selected\"]) as number[],\n  }\n\n  componentDidMount(): void {\n    super.componentDidMount()\n    document.body.style.background = \"transparent\"\n  }\n\n  render(): ReactNode {\n    // Arguments\n    const words: string[] = this.props.args[\"words\"]\n\n    // Computed values\n    const selected = this.state.selected\n    const theme: string = this.props?.theme?.base ?? \"light\"\n\n    return (\n      <div className=\"wrapper\">\n        {words.map((option, idx) => (\n          <button\n            onClick={() => this.onClicked(idx)}\n            className={`${theme} ${selected.includes(idx) ? \"selected\" : \"\"}`}\n            key={idx}\n          >\n            {option}\n          </button>\n        ))}\n      </div>\n    )\n  }\n\n  private onClicked = (idx: number): void => {\n    if (this.state.selected.includes(idx)) {\n      let s = this.state.selected.filter((val: any) => val !== idx)\n      this.setState(\n        (prevState) => ({ current: idx, selected: s }),\n        () => Streamlit.setComponentValue(s)\n      )\n    } else {\n      let s = [...this.state.selected, idx]\n      this.setState(\n        (prevState) => ({ current: idx, selected: s }),\n        () => Streamlit.setComponentValue(s)\n      )\n    }\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport BtnSelect from \"./BtnSelect\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <BtnSelect />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}